# -*- coding: utf-8 -*-
"""Gowthami_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SOhSuA4_ZraHj2ETv3CsSFmN9HDbdl52
"""

pip install flask_sqlalchemy flask

# Install necessary libraries if not installed
# !pip install flask_sqlalchemy flask

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)

# Configure SQLite Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///library.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# Define Book Model
class Book(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    author = db.Column(db.String(100), nullable=False)
    genre = db.Column(db.String(100), nullable=False)

# Create database tables
with app.app_context():
    db.create_all()

# GET all books
@app.route('/books', methods=['GET'])
def get_books():
    books = Book.query.all()
    if not books:
        return jsonify({"message": "No books available"}), 404
    return jsonify([{"id": book.id, "title": book.title, "author": book.author, "genre": book.genre} for book in books])

# GET a book by ID
@app.route('/books/<int:book_id>', methods=['GET'])
def get_book(book_id):
    book = Book.query.get(book_id)
    if not book:
        return jsonify({"message": "Book not found"}), 404
    return jsonify({"id": book.id, "title": book.title, "author": book.author, "genre": book.genre})

# POST (Add a new book)
@app.route('/books', methods=['POST'])
def add_book():
    data = request.json
    new_book = Book(title=data["title"], author=data["author"], genre=data["genre"])
    db.session.add(new_book)
    db.session.commit()
    return jsonify({"message": "Book added"}), 201

# PUT (Update a book)
@app.route('/books/<int:book_id>', methods=['PUT'])
def update_book(book_id):
    book = Book.query.get(book_id)
    if not book:
        return jsonify({"message": "Book not found"}), 404

    data = request.json
    book.title = data.get("title", book.title)
    book.author = data.get("author", book.author)
    book.genre = data.get("genre", book.genre)
    db.session.commit()
    return jsonify({"message": "Book updated"})

# DELETE a book
@app.route('/books/<int:book_id>', methods=['DELETE'])
def delete_book(book_id):
    book = Book.query.get(book_id)
    if not book:
        return jsonify({"message": "Book not found"}), 404

    db.session.delete(book)
    db.session.commit()
    return jsonify({"message": "Book deleted"})

if __name__ == '__main__':
    app.run(debug=True)

!pip install --upgrade flask pyngrok
!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
!unzip ngrok-stable-linux-amd64.zip
!./ngrok authtoken 2t2F7csQUEXPV6s8TznBA1hncfl_272vr9HwKUEe4RMdxWW3F

from flask import Flask, jsonify
from threading import Thread

app = Flask(__name__)

@app.route('/get_name', methods=['GET'])
def get_name():
    return jsonify({"name": "Gowthami"})

# Run Flask in a separate thread
def run():
    app.run(port=5000)

t = Thread(target=run)
t.start()

import requests

url = "http://127.0.0.1:5000/get_name"  # Replace with actual ngrok URL

response = requests.get(url)

if response.status_code == 200:
    print("API Response:", response.json())
else:
    print("Error:", response.status_code)